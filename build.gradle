/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Nikita' at '15.07.14 15:30' with Gradle 2.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.0/userguide/tutorial_java_projects.html
 */
import org.ajoberstar.grgit.*
import java.text.SimpleDateFormat
import org.eclipse.jgit.api.errors.GitAPIException
import org.gradle.logging.StyledTextOutput;
import org.gradle.logging.StyledTextOutputFactory;
import static org.gradle.logging.StyledTextOutput.Style;
import groovyx.gpars.GParsPool



apply plugin: 'java'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.ajoberstar:grgit:+'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:+'
        classpath 'org.ajoberstar:grgit:+'
        classpath "org.codehaus.gpars:gpars:+"
    }
}

task tezt << {
    /* catch exception
    try {
        def x = 2 / 0

    } catch (e) {
        println e
    }
    */

    /*color output
    def out = services.get(StyledTextOutputFactory).create("blah")
    println out.dump()
    out.withStyle(Style.Normal).println("Normal")
    out.withStyle(Style.Header).println("Header")
    out.withStyle(Style.UserInput).println("UserInput")
    out.withStyle(Style.Identifier).println("Identifier")
    out.withStyle(Style.Description).println("Description")
    out.withStyle(Style.ProgressStatus).println("ProgressStatus")
    out.withStyle(Style.Success).println("Success")
    out.withStyle(Style.Failure).println("Failure")
    out.withStyle(Style.Info).println("Info")
    out.withStyle(Style.Error).println("Error")

    out.withStyle(Style.Identifier).append("z")
    */

    /*correct way to print with styling
    def out = services.get(StyledTextOutputFactory).create("blah")
    //out.withStyle(true ? Style.Identifier : Style.Failure)
    out.withStyle(Style.Identifier).println("ATATA")
    */

    /*split string :)
    args.split("\\,").each{
        println it
    }
    */

    /*multithreading
    def corees = Runtime.runtime.availableProcessors()
    def threads = 10

    GParsPool.withPool(threads) {
        (1..100).eachParallel {
            println("_$it")
        }
    }
    */

    /*closure as a parameter
    callableClosure({
        println "callableClosure"
    })
    */
}

def callableClosure(meth) {
        meth()
}

def executeConcurrently(threads, closure) {
    GParsPool.withPool(threads) {
        closure()
    }
}

def pullRepositories = { directory ->
    println directory

    def baseDirectories = [directory]
    def repoz = []

    baseDirectories.each{dir ->
        def baseDir = new File(dir)

        baseDir.listFiles().each{ file -> 
            if(file.isDirectory()) {
                repoz << file
            }
        }
    }

    def dateFormat = new SimpleDateFormat("yyyy-MM-dd, kk:mm")
    def results = []
    def out = services.get(StyledTextOutputFactory).create("blah")

    executeConcurrently(30, {
        repoz.eachParallel { repoFile ->
            try {
                def grgit = Grgit.open(repoFile.path)

                try {
                    grgit.pull()
                    println repoFile.name + " success\n"
                    def result = "Last commit by " + grgit.head().author.email + " at " + dateFormat.format(grgit.head().getDate()) + ": " + grgit.head().shortMessage
                    def toRet = [repoName: repoFile.name, result: result, success: true]
                    results << toRet
                } catch (e) {
                    def toRet = [repoName: repoFile.name, result: e.cause, success: false]
                    results << toRet
                    println repoFile.name + " FAILURE\n\n"
                }
            } catch(e) {
                out.withStyle(Style.Failure).println(e)
            }
        }
    })   

    results.each {
        def toPrint = it.repoName + ":\n" + it.result + "\n";
        if(it.success)
            out.withStyle(Style.Identifier).println(toPrint)
        else
            out.withStyle(Style.Failure).println(toPrint)
    }
}

task pull620 << {
    pullRepositories("C:\\Development\\Projects\\6.2.0")
}

task pull650 << {
    pullRepositories("C:\\Development\\Projects\\6.5.0")
}

task pullInFolder << {
    pullRepositories(pathToRoot)
}

task cloneRepo << {
    println "$uri"

    def grgit = Grgit.clone(dir: new File("BatRunner"), uri: "$uri")
    println grgit.dump()
}